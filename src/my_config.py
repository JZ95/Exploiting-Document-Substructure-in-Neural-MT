"""
Re-define part of the configuraion
"""
from nematus.config import *


def my_read_config_from_cmdline():
    """Reads a config from the command-line.

    Logs an error and exits if the parameter values are not mutually
    consistent.

    Returns:
        An argparse.Namespace object representing the config.
    """

    spec = ConfigSpecification()

    # Construct an argparse.ArgumentParser and parse command-line args.
    parser = _construct_argument_parser(spec)
    config = parser.parse_args()

    # Construct a second ArgumentParser but using default=argparse.SUPPRESS
    # in every argparse.add_argument() call. This allows us to determine
    # which parameters were actually set by the user.
    # Solution is from https://stackoverflow.com/a/45803037
    aux_parser = _construct_argument_parser(spec, suppress_missing=True)
    aux_config = aux_parser.parse_args()
    set_by_user = set(vars(aux_config).keys())
    # Perform consistency checks.
    error_messages = _check_config_consistency(spec, config, set_by_user)
    if len(error_messages) > 0:
        for msg in error_messages:
            logging.error(msg)
        sys.exit(1)

    # Set meta parameters.
    meta_config = argparse.Namespace()
    meta_config.from_cmdline = True
    meta_config.from_theano = False

    # Run derivation functions.
    for group in spec.group_names:
        for param in spec.params_by_group(group):
            if param.derivation_func is not None:
                setattr(config, param.name,
                        param.derivation_func(config, meta_config))

    return config