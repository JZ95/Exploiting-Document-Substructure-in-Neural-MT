import logging
import numpy
import collections
import util
import subprocess
import tempfile
import translate
import locale


def validate_clf(session, model, config, text_iterator):
    ce_vals, y_pred, y_true = [], [], []

    for (xx, yy), flag in text_iterator:
        x, x_mask, y, y_mask = util.data_prepare_func(flag, xx, yy, config.factors, maxlen=None)

        # Run the minibatch through the model to get the sentence-level cross entropy values.
        feeds = {model.inputs.x: x,
                 model.inputs.x_mask: x_mask,
                 model.inputs.y: y,
                 model.inputs.y_mask: y_mask,
                 model.inputs.training: False}
        batch_ce_vals, batch_preds = session.run([model.loss_per_sec, model.preds], feed_dict=feeds)
        y_true.extend(y.ravel().tolist())
        y_pred.extend(batch_preds.tolist())
        ce_vals.extend(batch_ce_vals.tolist())
        logging.info("Seen {}".format(len(ce_vals)))

    assert len(y_true) == len(y_pred)
    acc_score = (numpy.array(y_true) == numpy.array(y_pred)).sum() / len(y_true)

    num_secs = len(ce_vals)
    sum_ce = sum(ce_vals)
    avg_ce = sum_ce / num_secs

    logging.info('Validation external score (Accuracy) : {0:.5f} '.format(acc_score))
    logging.info('Validation cross entropy (AVG/SUM): {0:.5f} {1:.5f}'.format(avg_ce, sum_ce))

    return avg_ce, acc_score


def validate_nmt(session, model, config, text_iterator):
    ce_vals, token_counts = [], []
    for (xx, yy), flag in text_iterator:
        x, x_mask, y, y_mask = util.data_prepare_func(flag, xx, yy, config.factors, maxlen=None)

        feeds = {model.inputs.x: x,
                 model.inputs.x_mask: x_mask,
                 model.inputs.y: y,
                 model.inputs.y_mask: y_mask,
                 model.inputs.training: False}
        batch_ce_vals = session.run(model.loss_per_sentence, feed_dict=feeds)
        word_len = y_mask.shape[1]
        if len(y_mask.shape) == 3:
            batch_token_counts = [numpy.count_nonzero(s) for s in 
                                                numpy.reshape(
                                                    numpy.transpose(y_mask, (0, 2, 1)),
                                                    (-1, word_len))]
        else:
            batch_token_counts = [numpy.count_nonzero(s) for s in y_mask.T]
        ce_vals += list(batch_ce_vals)
        token_counts += batch_token_counts
        logging.info("Seen {}".format(len(ce_vals)))

    assert len(ce_vals) == len(token_counts)
    num_sents = len(ce_vals)
    num_tokens = sum(token_counts)
    sum_ce = sum(ce_vals)
    avg_ce = sum_ce / num_sents
    logging.info('Validation cross entropy (AVG/SUM/N_SENTS/N_TOKENS): {0:.5f} ' \
                 '{1:.5f} {2:d} {3:d}'.format(avg_ce, sum_ce, num_sents, num_tokens))
    return avg_ce


def validate_with_script(session, model, config):
    if config.valid_script == None:
        return None
    logging.info('Starting external validation.')
    out = tempfile.NamedTemporaryFile(mode='w')
    translate.translate_file(input_file=open(config.valid_datasets[0]),
                             output_file=out,
                             session=session,
                             model=model,
                             config=config,
                             beam_size=config.beam_size,
                             normalization_alpha=config.normalization_alpha)
    out.flush()
    args = [config.valid_script, out.name]
    proc = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    stdout_bytes, stderr_bytes = proc.communicate()
    encoding = locale.getpreferredencoding()
    stdout = stdout_bytes.decode(encoding=encoding)
    stderr = stderr_bytes.decode(encoding=encoding)
    if len(stderr) > 0:
        logging.info("Validation script wrote the following to standard "
                     "error:\n" + stderr)
    if proc.returncode != 0:
        logging.warning("Validation script failed (returned exit status of "
                        "{}).".format(proc.returncode))
        return None
    try:
        score = float(stdout.split()[0])
    except:
        logging.warning("Validation script output does not look like a score: "
                        "{}".format(stdout))
        return None
    logging.info("Validation script score: {}".format(score))
    return score