import tensorflow as tf

class ModelInputs(object):
    def __init__(self):
        self.training = tf.placeholder_with_default(False,
            name='training',
            shape=())

class CLFModelInputs(ModelInputs):
    def __init__(self, config):
        super(CLFModelInputs, self).__init__()
        sent_len, word_len, batch_size = None, None, None
        self.x = tf.placeholder(
            name='x',
            shape=(config.factors, sent_len, word_len, batch_size),
            dtype=tf.int32)

        self.x_mask = tf.placeholder(
            name='x_mask',
            shape=(sent_len, word_len, batch_size),
            dtype=tf.float32)

        self.y = tf.placeholder(
            name='y',
            shape=(batch_size),
            dtype=tf.int32)

        self.y_mask = tf.placeholder(
            name='y_mask',
            shape=(batch_size),
            dtype=tf.int32)


class NMTModelInputs(ModelInputs):
    def __init__(self, config):
        super(NMTModelInputs, self).__init__()
        sent_len, word_len, batch_size = None, None, None

        self.x = tf.placeholder(
            name='x',
            shape=(config.factors, sent_len, word_len, batch_size),
            dtype=tf.int32)

        self.x_mask = tf.placeholder(
            name='x_mask',
            shape=(sent_len, word_len, batch_size),
            dtype=tf.float32)

        self.y = tf.placeholder(
            name='y',
            shape=(sent_len, word_len, batch_size),
            dtype=tf.int32)

        self.y_mask = tf.placeholder(
            name='y_mask',
            shape=((sent_len, word_len, batch_size)),
            dtype=tf.int32)


class VanillaNMTModelInputs(ModelInputs):
    def __init__(self, config):
        super(VanillaNMTModelInputs, self).__init__()
        word_len, batch_size = None, None

        self.x = tf.placeholder(
            name='x',
            shape=(config.factors, word_len, batch_size),
            dtype=tf.int32)

        self.x_mask = tf.placeholder(
            name='x_mask',
            shape=(word_len, batch_size),
            dtype=tf.float32)

        self.y = tf.placeholder(
            name='y',
            shape=(word_len, batch_size),
            dtype=tf.int32)

        self.y_mask = tf.placeholder(
            name='y_mask',
            shape=(word_len, batch_size),
            dtype=tf.float32)
