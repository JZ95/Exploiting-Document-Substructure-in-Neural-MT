#!/usr/bin/env python3
import sys
import os
import tensorflow as tf
main_dir = os.path.join(os.path.dirname(__file__), '../')
src_dir = os.path.join(main_dir, 'src')
sys.path.append(main_dir)
sys.path.append(src_dir)
from src.models import VanillaNMT, StructureAwareNMT, HANModel, JointModel

class TempConfig():
    def __init__(self, mode):
        self.mode = mode

        self.embedding_size = 500
        self.target_embedding_size = 500
        self.source_vocab_sizes = [10000, 1000]
        self.target_vocab_size = 10000
        self.factors = 2
        self.dim_per_factor = [400, 100]
        self.tie_encoder_decoder_embeddings = False
        self.tie_decoder_embeddings = True
        self.output_hidden_activation = 'tanh'

        self.word_rnn_enc_depth = 2
        self.word_rnn_enc_transition_depth = 2
        self.word_rnn_state_size = 512

        self.sent_rnn_enc_depth = 2
        self.sent_rnn_enc_transition_depth = 2
        self.sent_rnn_state_size = 128
        self.sec_repr_size = 512

        self.rnn_dec_depth = 4
        self.rnn_dec_base_transition_depth = 4
        self.rnn_dec_high_transition_depth = 2
        self.rnn_dec_deep_context = True

        self.rnn_use_dropout = True
        self.rnn_dropout_embedding = 0.5
        self.rnn_dropout_hidden = 0.5
        self.rnn_dropout_source = 0.5
        self.rnn_dropout_target = 0.5
        self.rnn_layer_normalization = True
        self.rnn_lexical_model = True

        self.translation_maxlen = 200
        self.label_smoothing = 0.1
        self.sampling_temperature = 0.5
        self.translation_strategy = 'beamsearch'

def test_model_builders():
    VanillaNMT(TempConfig('baseline-nmt'))
    print('=' * 20)
    print('build VanillaNMT succeeed.')
    print('=' * 20)
    tf.reset_default_graph()

    HANModel(TempConfig('clf'))
    print('=' * 20)
    print('build HANModel succeeed.')
    print('=' * 20)
    tf.reset_default_graph()

    StructureAwareNMT(TempConfig('nmt'))
    print('=' * 20)
    print('build StructureAwareNMT succeeed.')
    print('=' * 20)
    tf.reset_default_graph()

    JointModel(TempConfig('joint'))
    print('=' * 20)
    print('build JointModel succeeed.')
    print('=' * 20)
    tf.reset_default_graph()
    

if __name__ == "__main__":
    test_model_builders()